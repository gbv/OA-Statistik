<?php
/**
 * Custom Data Provider
 * 
 * Handles OAI requests
 * Delivers Context Objects (generated from XML files as generated by the day by log2ctx)
 * 
 * See below for controller!
 */

error_reporting(true);

require('lib/oai-data-provider.php');
require('config.php');

define('CTXO_NAMESPACE','info:ofi/fmt:xml:xsd:ctx');
define('CTXO_SCHEMA','http://www.openurl.info/registry/docs/xsd/info:ofi/fmt:xml:xsd:ctx');
define('CTXO_METADATAPREFIX','oas');

/**
 * Derived child class
 * For documentation, see: oai-data-provider/lib/oai-data-provider.php
 */ 
class MyOAIDataProvider extends OAI20DataProvider {
	
	var $dbc;
	
	/**
	 * Creates new instance
	 * 
	 * @param $baseURL base URL of the repository
	 * @param $max_items optional: number of items to be harvested; increase with caution
	 * @param $repository optional: name of own repository
	 * @param $adminEmail optional: set administrator e-mail address
	 */
	function __construct($baseURL, $max_items=100, $repositoryName='OAI Aggregator', $adminEmail=false) {
	    
		global $config;
		
		try {
		    $this->dbc=new PDO($config['db_uri'],$config['db_user'],$config['db_password']);
		} catch(PDOException $e) {
		    // TODO: Handle server error
		}
		
		parent::__construct($baseURL, $max_items, $repositoryName, $adminEmail);
	}
	
	/**
	 * @see oai-data-provider/lib/OAI20DataProvider#OAI20ListMetadataFormats()
	 */
	function OAI20ListMetadataFormats() {
		$this->_verbnode->appendChild($format_ctx=$this->_response->createElementNS($ns='http://www.openarchives.org/OAI/2.0/', 'metadataFormat'));
		$format_ctx->appendChild($this->_response->createElementNS($ns,'metadataPrefix',CTXO_METADATAPREFIX));
		$format_ctx->appendChild($this->_response->createElementNS($ns,'schema',CTXO_SCHEMA));
		$format_ctx->appendChild($this->_response->createElementNS($ns,'metadataNamespace',CTXO_NAMESPACE));
		parent::OAI20ListMetadataFormats();
	}
	
	/**
	 * @see oai-data-provider/lib/OAI20DataProvider#OAI20GetRecord()
	 */
	function OAI20GetRecord() {
		
		global $config;
	    
		if($this->_params['metadataPrefix']=='oai_dc' || $this->_params['metadataPrefix']=='oas') {
			// Format oai_dc muss behandelt werden
			// Format oas ist das generische OA-Statistik-spezifische Format
			// dazu hier die Funktion »recordhelper«, die einen Record aus der Datenbank holt:

			$id=strstr($this->_params['identifier'],'/');
			// Identifier-Wert prüfen, da von außen übergeben:
			if((false!==($result=$this->record_helper($id,$this->_params['metadataPrefix'])))) {
				// alles klar, Ausgabe:
				$this->_verbnode->appendChild($result);
			} else {
				// bei Problemen Fehler werfen:
				$this->_OAI20ErrorIdDoesNotExist();
			}
		} else {
			// oder halt bei fehlendem Metadatenformat einen Fehler werfen:
			$this->_OAI20ErrorCannotDisseminateFormat();
		}
	}
	
	/**
	 * @see oai-data-provider/lib/OAI20DataProvider#OAI20ListRecords()
	 * @param $header_only If set, ListIdentifiers will be called instead of ListRecords
	 *                     In general, program logic for both cases should be identical 
	 */
	function OAI20ListRecords($header_only=false) {
		
		global $config;
		if(isset($this->_params['set'])) {
			// handling of sets if necessary
			$this->_OAI20ErrorNoSetHierarchy();
			return false;
		}
		if($this->_params['metadataPrefix']!=='oai_dc' && $this->_params['metadataPrefix']!=='oas') {
			// again, handling of metadataPrefix
			$this->_OAI20ErrorCannotDisseminateFormat();
			return false;
		}

		// Base class already evaluates resumption tokens and adds parameter 'pos',
		// thus no management of tokens required
		$from=$this->_OAI20_parse_datestamp($this->_params['from']);
		if(!$from) $from=0;
		$until=$this->_OAI20_parse_datestamp($this->_params['until']);
		if(!$until) $until=strtotime('2037-12-31'); // STUPID!
                
		$stmt=$this->dbc->prepare('SELECT * FROM '.$config['db_table'].
			' WHERE timestamp > ? AND timestamp < ? LIMIT '.
			((int) $this->config['max_items']).
			' OFFSET '.((int) $this->_params['pos']).';');
                
		if(!$stmt->execute(array($from, $until))) {
			$this->_OAI20ErrorNoRecordsMatch();
			return false;
		}

		while($data = $stmt->fetch()) {
			$this->_verbnode->appendChild($this->record_helper(false, $this->_params['metadataPrefix'], $header_only, $data));
		}
		
		// append resumption token if necessary
		$stmt=$this->dbc->prepare('SELECT COUNT(*) AS relevant FROM '.$config['db_table'].' WHERE timestamp > ? AND timestamp < ?');
		if((!$stmt->execute(array($from, $until))) || (!($data=$stmt->fetch()))) {
			// TODO: handle generic error, abort here
			return false;
		}
		if($data['relevant'] > ($pos = ($this->_params['pos'] + $this->config['max_items']))) {
			$this->_OAI20ResumptionToken($pos,$this->_params,array('completeListSize'=>$data['relevant'],'cursor'=>$this->_params['pos']));
		} elseif($data['relevant'] > $this->config['max_items']) {
			// empty resumtion token at end of list (only if list was interrupted by resumption tokens)
			$this->_OAI20ResumptionToken(false,$this->_params,array('completeListSize'=>$data['relevant'],'cursor'=>$this->_params['pos']));
		}
	}
	
	/**
	 * @see oai-data-provider/lib/OAI20DataProvider#OAI20ListIdentifiers()
	 */
	function OAI20ListIdentifiers() {
		// see comment on parameter of OAI20ListRecords!
		$this->OAI20ListRecords(true);
	}
	
	/**
	 * Read a record from the database
	 * 
	 * @param $id document identifier
	 * @param $prefix optional: OAI identifier prefix
	 * @param $header_only optional: just return header
	 * @param $dbrow optional: use cached database row, disclaim db request
	 * @return DOMDocument record as XML data
	 */
	function record_helper($id, $prefix='oas', $header_only=false, $dbrow=false) {
		global $config;
	    // read record
		if($dbrow==false) {
			if(!preg_match('/.*:([^:]+).([0-9]+)/', $id, $match))
				return false;
			
			$stmt=$this->dbc->prepare('SELECT * FROM '.$config['db_table'].' WHERE identifier=? AND line=?');
			if(!$stmt->execute(array($match[1], $match[2])))
				return false;
			if(!($data = $stmt->fetch()))
				return false;
		} else {
			$data=$dbrow;
		}
		$header=$this->_response->createElementNS($ns='http://www.openarchives.org/OAI/2.0/','header');
		$header->appendChild($this->_response->createElementNS($ns,'identifier',$config['oai_identifier_prefix'].':'.$data['identifier'].'.'.$data['line']));
		$header->appendChild($this->_response->createElementNS($ns,'datestamp', gmdate('Y-m-d\TH:i:s\Z',$data['timestamp'])));
		
		if($header_only) return $header; // asked for record header only

		$rec=$this->_response->createElementNS($ns,'record');
		$rec->appendChild($header);
		$rec->appendChild($meta=$this->_response->createElementNS($ns,'metadata'));
		if($prefix=='oai_dc') {
		    // DC: dummy data
		    error_reporting(E_ALL);
		    $meta->appendChild($dc=$this->_response->createElementNS($oaidcns='http://www.openarchives.org/OAI/2.0/oai_dc/','oaidc:dc'));
		    //TODO CHECK THIS!
		    $dc->setAttributeNS('http://www.w3.org/2001/XMLSchema-instance','xsi:schemaLocation','http://www.openarchives.org/OAI/2.0/oai_dc/   http://www.openarchives.org/OAI/2.0/oai_dc.xsd');
		    $dc->appendChild($this->_response->createElementNS($dcns='http://purl.org/dc/elements/1.1/','dc:identifier',
				'http://oa-statistik.sub.uni-goettingen.de/ns/logs/webdoc/?id='.urlencode($id)));
		    $dc->appendChild($this->_response->createElementNS($dcns,'dc:description', 'Logdaten Server webdoc.sub.gwdg.de'));
		} else {
		    $frag = $this->_response->createDocumentFragment();
		    $frag->appendXML($data['data']);
		    $meta->appendChild($frag);
		}
		return $rec;
	}
	
}


// Actual controller
try {
    $oaidp=new MyOAIDataProvider(
	    $config['oai_base_url'],
	    10,
	    $config['repo_name'],
	    $config['oai_server_admin']);
    
	    $resultdom=$oaidp->handle_request('oai2.xsl'); // embed stylesheet
    	$resultdom->xinclude(); // resolve XIncludes, i.e. embed Context Objects, see above
        $resultdom->formatOutput = true; // Make output more readable for validation processes.
    
    // Output if everything is fine
    header('Content-Type: application/xml');
    $result=$resultdom->saveXML();

    // FIXME: Ugly hack to sanitize output:
    if($config['fix_broken_namespaces']) {
	    $result=str_replace(
		    array('<default:','</default:','<default1:','</default1:','<default11:','</default11:','<default2:','</default2:',
			' xmlns:default="http://dini.de/namespace/oas-info" xmlns:default1="http://dini.de/namespace/oas-requesterinfo" xmlns:default2="info:ofi/fmt:xml:xsd:sch_svc"',
			' xmlns:default="info:ofi/fmt:xml:xsd:ctx" xmlns:default1="http://dini.de/namespace/oas-info" xmlns:default11="http://dini.de/namespace/oas-requesterinfo" xmlns:default2="info:ofi/fmt:xml:xsd:sch_svc"',
			' xmlns:default="info:ofi/fmt:xml:xsd:ctx" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:default1="http://dini.de/namespace/oas-info" xmlns:default11="http://dini.de/namespace/oas-requesterinfo" xmlns:default2="info:ofi/fmt:xml:xsd:sch_svc"',
			' xmlns:default="info:ofi/fmt:xml:xsd:ctx" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:default1="http://dini.de/namespace/oas-info" xmlns:default11="info:ofi/fmt:xml:xsd:sch_svc" xmlns:default2="http://dini.de/namespace/oas-requesterinfo"'
			),
		    array('<','</','<','</','<','</','<','</',
			'',
			'',
			'',
			''
			),
		    $result);
    }
    
    echo $result;
} catch(Exception $e) {
    // Uh oh, something went wrong
	header('HTTP/1.0 500 Internal Server Error');
    die();
}

?>
